
// You will be given a list of 32 bit unsigned integers. Flip all the bits (1 ->0) and (0->1) and return the result as an unsigned integer.
// Complete the flippingBits function in the editor below.


'use strict';

// const fs = require('fs');

// process.stdin.resume();
// process.stdin.setEncoding('utf-8');

// let inputString = '';
// let currentLine = 0;

// process.stdin.on('data', function(inputStdin) {
//     inputString += inputStdin;
// });

// process.stdin.on('end', function() {
//     inputString = inputString.split('\n');

//     main();
// });

// function readLine() {
//     return inputString[currentLine++];
// }

const fs = require('fs');

const inputString = fs.readFileSync('./inputcode05.txt', 'utf8');
const inputArray = inputString.trim().split('\n');
let currentLine = 0;

function readLine() {
    return inputArray[currentLine++];
}

/*
 * Complete the 'flippingBits' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts LONG_INTEGER n as parameter.
 */

function flippingBits(n) {
    // Create a mask with all bits set to 1
    const mask = 2 ** 32 - 1;
  
    // Perform bitwise XOR operation between n and the mask
    const result = n ^ mask;
  
    return result >>> 0; // Convert the result to unsigned 32-bit integer
  }

function main() {
    //const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const ws = fs.createWriteStream('./outputcode05.txt');

    const q = parseInt(readLine().trim(), 10);

    for (let qItr = 0; qItr < q; qItr++) {
        const n = parseInt(readLine().trim(), 10);

        const result = flippingBits(n);

        ws.write(result + '\n');
    }

    ws.end();
}

main();