// We define super digit of an integer x using the following rules:

// Given an integer, we need to find the super digit of the integer.

// If x has only 1 digit, then its super digit is x.
// Otherwise, the super digit of x is equal to the super digit of the sum of the digits of x.

// n= 9875
// k=4
// The number p is created by concatenating the string n k times so the initial p=9875987598759875.

//     superDigit(p) = superDigit(9875987598759875)
//                   9+8+7+5+9+8+7+5+9+8+7+5+9+8+7+5 = 116
//     superDigit(p) = superDigit(116)
//                   1+1+6 = 8
//     superDigit(p) = superDigit(8)

// All of the digits of p sum to 116. The digits of 116 sum to 8. 8 is only one digit, so it is the super digit.

'use strict';


const fs = require('fs');
const inputString = fs.readFileSync('./inputcode010.txt', 'utf8').split('\n');
let currentLine = 0;


function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'superDigit' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. STRING n
 *  2. INTEGER k
 */

function superDigit(n, k) {
    // Write your code here
    if (n.length === 1) {
        return parseInt(n);
    } else {
        let sum = 0;
        for (let i = 0; i < n.length; i++) {
            sum += parseInt(n[i]);
        }
        sum *= k;
        return superDigit(sum.toString(), 1);
    }

}

function main() {
    const ws = fs.createWriteStream('./outputcode010.txt');

    const firstMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

    const n = firstMultipleInput[0];

    const k = parseInt(firstMultipleInput[1], 10);

    const result = superDigit(n, k);

    ws.write(result + '\n');

    ws.end();
}

main();