// Given an array of n distinct integers, transform the array into a zig zag sequence by permuting the array elements. A sequence will be called a zig zag sequence if the first k elements in the sequence are in increasing order and the last  elements are in decreasing order, where k=(n+1)/2. You need to find the lexicographically smallest zig zag sequence of the given array.

// For each test cases, print the elements of the transformed zig zag sequence in a single line.

// The first line contains t the number of test cases. The first line of each test case contains an integer n, denoting the number of array elements. The next line of the test case contains n elements of array a.

'use strict';

const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

let testCases = 0;
let currentCase = 0;

rl.on('line', function (line) {
    if (testCases === 0) {
        testCases = parseInt(line);
    } else {
        const n = parseInt(line);
        rl.once('line', function (arrLine) {
            const a = arrLine.split(' ').map(Number);
            findZigZagSequence(a, n);
            currentCase++;
            if (currentCase === testCases) {
                rl.close();
            }
        });
    }
});

rl.on('close', function () {
    process.exit(0);
});

function findZigZagSequence(a, n) {
    a.sort((a, b) => a - b);
    const mid = Math.floor(n / 2);
    const temp = a[mid];
    a[mid] = a[n - 1];
    a[n - 1] = temp;

    let st = mid + 1;
    let ed = n - 2;
    while (st <= ed) {
        const temp = a[st];
        a[st] = a[ed];
        a[ed] = temp;
        st = st + 1;
        ed = ed - 1;
    }

    console.log(a.join(' '));
}
