'use strict';

// const fs = require('fs');

// process.stdin.resume();
// process.stdin.setEncoding('utf-8');

// let inputString = '';
// let currentLine = 0;

// process.stdin.on('data', function (inputStdin) {
//     inputString += inputStdin;
// });

// process.stdin.on('end', function () {
//     inputString = inputString.split('\n');

//     main();
// });

const fs = require('fs');
const inputString = fs.readFileSync('./inputcode1.txt', 'utf8').split('\n');
let currentLine = 0;

function readLine() {
    return inputString[currentLine++];
}



/*
 * Complete the 'findMedian' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function findMedian(arr) {
    // Write your code here

    arr.sort((a, b) => a - b);
    // Obtener la longitud del array
    const length = arr.length;

    // Calcular la mediana en funciÃ³n de la longitud del array
    if (length % 2 === 0) {
        // Si la longitud es par, tomar el promedio de los dos valores centrales
        const midIndex1 = length / 2 - 1;
        const midIndex2 = length / 2;
        const median = (arr[midIndex1] + arr[midIndex2]) / 2;
        return median;
    } else {
        // Si la longitud es impar, tomar el valor central
        const midIndex = Math.floor(length / 2);
        const median = arr[midIndex];
        return median;
    }
}

function main() {
    // const ws = fs.createWriteStream(process.env.OUTPUT_PATH);
    
    const ws = fs.createWriteStream('outputcode1.txt');

    const n = parseInt(readLine().trim(), 10);

    const arr = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));

    const result = findMedian(arr);

    ws.write(result + '\n');

    ws.end();
}

main();

